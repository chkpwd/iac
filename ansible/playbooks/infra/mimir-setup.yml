---
- name: Deploy Minio
  hosts: mgmt-srv-01
  become: true
  vars:
    pull_images: false
  module_defaults:
    community.docker.docker_container:
      restart_policy: always
      state: started
      pull: "{{ pull_images }}"
      comparisons:
        "*": strict
        env: allow_more_present
  handlers:
    #   - name: Restart Minio
    #     community.docker.docker_container:
    #       name: minio
    #       restart: true
    #       state: started
    #       comparisons:
    #         '*': ignore
    #     when: not deploy_container is changed
    - name: Prune Docker images
      community.docker.docker_prune:
        images: true
        images_filters:
          dangling: false
  pre_tasks:
    - name: Check if Docker is installed
      ansible.builtin.command: which docker
      register: docker_check
      failed_when: false
      changed_when: false
      check_mode: false
  tasks:
    - name: Copy container files # noqa risky-file-permissions
      ansible.builtin.copy: "{{ item }}"
      loop:
        - content: >-
            {"version": "10", "aliases":
            {"local": {"url": "http://localhost:9001", "accessKey": "admin", "secretKey": "{{ minio_password }}", "api": "S3v4", "path": "auto"}}}
          dest: "{{ configuration_path }}/minio/config.json"
          owner: root
          group: root
          mode: "0400"
      loop_control:
        label: "{{ item.dest }}"
      notify: Restart Minio
      tags: [files]
    - name: Deploy Minio container
      community.docker.docker_container:
        name: minio
        image: quay.io/minio/minio:latest
        command: server
        env:
          MINIO_ROOT_USER: admin
          MINIO_ROOT_PASSWORD: "{{ lookup('bws_cache', 'common-secrets').value.common_password }}"
          MINIO_VOLUMES: /data
          MINIO_ADDRESS: ":9001"
          MINIO_CONSOLE_ADDRESS: ":9002"
          MINIO_SERVER_URL: https://s3.{{ domain }}
          MINIO_DOMAIN: s3.{{ domain }}
          MINIO_BROWSER_REDIRECT_URL: https://s3.{{ domain }}/ui
          MINIO_SITE_COMMENT: "{{ site }}"
          MINIO_SITE_NAME: "{{ site_short }}-0"
          MINIO_SITE_REGION: "{{ site_short }}"
          MINIO_IDENTITY_OPENID_DISPLAY_NAME: authentik
          MINIO_IDENTITY_OPENID_CONFIG_URL: https://sso.{{ domain }}/application/o/minio/.well-known/openid-configuration
          MINIO_IDENTITY_OPENID_CLIENT_ID: minio
          MINIO_IDENTITY_OPENID_CLIENT_SECRET: >-
            {{ lookup('bws_cache', 'infra-minio-secrets').value.oauth_secrets }}
          MINIO_IDENTITY_OPENID_SCOPES: openid,profile,email,minio
          MINIO_PROMETHEUS_URL:
            "http://{{ hostvars.Monitor01.prometheus_users[0].username }}:{{ hostvars.Monitor01.prometheus_users[0].password }}@Monitor01.{{ domain
            }}:9090"
          MINIO_PROMETHEUS_JOB_ID: minio
        ports:
          - "9001:9001"
          - "9002:9002"
        networks: [name: minio]
        volumes:
          - "{{ app_base_dir }}/minio/data:/data"
          - "{{ app_base_dir }}/minio/config.json:/tmp/.mc/config.json:ro"
          - "{{ app_base_dir }}/minio/backup:/backup"
        pull: true
      tags: [containers]
      register: deploy_container
      notify: Prune Docker images
