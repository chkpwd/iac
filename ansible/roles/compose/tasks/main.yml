- name: Check if multiple disks
  ansible.builtin.stat:
    path: /mnt/data
  register: multiple_disks

- name: Check Docker Present
  ansible.builtin.stat:
    path: /usr/bin/docker
  register: docker_installed

- name: Create dir
  ansible.builtin.file:
    path: "{{ configuration_path }}"
    state: directory
    owner: "{{ common_user }}"
    group: "{{ common_user }}"
    mode: '0755'
  register: docker_dir

- name: Create app directories
  ansible.builtin.file: # noqa risky-file-permissions
    path: "{{ item }}"
    owner: "{{ common_user }}"
    group: "{{ common_user }}"
    mode: 0755
    state: directory
  loop: "{{ service_definitions | selectattr('volumes', 'defined') | map(attribute='name') | product([configuration_path]) | map('reverse') | map('join', '/') }}"
  when: not item is match('.*\.\w{2,4}$')

- name: Install Docker only if not installed
  when: "'docker_hosts' in group_names and not docker_installed.stat.exists"
  block:
    - name: Docker Install
      ansible.builtin.include_role:
        name: geerlingguy.docker

- name: Configure Docker Daemon Path
  when: "'docker_hosts' in group_names and docker_installed.stat.exists and multiple_disks.stat.exists"
  block:
    - name: Create Docker Config Dir
      ansible.builtin.file:
        path: /etc/docker
        owner: "root"
        group: "root"
        mode: 0755
        state: directory

    - name: Set Docker Daemon Config
      ansible.builtin.template:
        src: templates/daemon.json.j2
        dest: /etc/docker/daemon.json
        owner: "root"
        group: "root"
        mode: 0644
      notify: Restart Docker Service
      when: ansible_facts['devices'] | length > 1

- name: Create network(s)
  when: docker_network is defined
  community.docker.docker_network:
    name: "{{ item }}"
  loop: "{{ docker_network }}"

- name: Deploy Docker containers # noqa args[module]
  when: docker_dir
  community.docker.docker_container: "{{ item }}"
  loop: "{{ service_definitions }}"
  loop_control:
    label: "{{ item.name }}"
  register: deploy_containers
