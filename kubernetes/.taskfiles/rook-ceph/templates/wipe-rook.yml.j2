apiVersion: batch/v1
kind: Job
metadata:
  name: &app wipe-rook
spec:
  parallelism: 3
  backoffLimit: 6
  template:
    metadata:
      labels:
        app.kubernetes.io/name: *app
    spec:
      hostPID: true
      enableServiceLinks: false
      restartPolicy: Never
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
      volumes:
        - name: rook-data-dir
          hostPath:
            path: {{ ENV.HOST_PATH }}
      containers:
        - name: disk-wipe
          image: ubuntu:24.04
          securityContext:
            privileged: true
          volumeMounts:
            - name: rook-data-dir
              mountPath: /node/rook-data
          env:
            - name: DISK
              value: "{{ ENV.DEVICE }}"
          command: ["/bin/bash", "-c"]
          args:
            - |
              apt update && apt install -y gdisk util-linux
              echo "Wiping {{ ENV.DEVICE }}"

              sgdisk --zap-all "{{ ENV.DEVICE }}"

              dd if=/dev/zero of="{{ ENV.DEVICE }}" bs=1K count=200 oflag=direct,dsync seek=0
              dd if=/dev/zero of="{{ ENV.DEVICE }}" bs=1K count=200 oflag=direct,dsync seek=$((1 * 1024 * 1024))
              dd if=/dev/zero of="{{ ENV.DEVICE }}" bs=1K count=200 oflag=direct,dsync seek=$((10 * 1024 * 1024))
              dd if=/dev/zero of="{{ ENV.DEVICE }}" bs=1K count=200 oflag=direct,dsync seek=$((100 * 1024 * 1024))
              dd if=/dev/zero of="{{ ENV.DEVICE }}" bs=1K count=200 oflag=direct,dsync seek=$((1000 * 1024 * 1024))

              blkdiscard "{{ ENV.DEVICE }}" || echo "blkdiscard failed or not supported"
