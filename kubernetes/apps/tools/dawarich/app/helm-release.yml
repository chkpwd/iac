---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/common-3.1.0/charts/library/common/values.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: diff2rss
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 3.6.0
      interval: 30m
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3

  values:
    image:
      repository: docker.io/freikin/dawarich
      pullPolicy: IfNotPresent
      tag: "0.22.2"

    env:
      minMinutesSpentInCity: "60"
      applicationHost: "dawarich.chkpwd.com"
      timeZone: "America/New_York"
      backgroundProcessingConcurrency: "10"
      applicationProtocol: "http"
      distanceUnit: "km"
      photonApiHost: "photon.komoot.io"
      photonApiUseHttps: "true"

    dawarich:
      replicaCount: 1

      livenessProbe:
        httpGet:
          path: /api/v1/health
          port: http
      readinessProbe:
        httpGet:
          path: /api/v1/health
          port: http
      startupProbe:
        httpGet:
          path: /api/v1/health
          port: http
        initialDelaySeconds: 30
        periodSeconds: 10
        failureThreshold: 10

      resources:
        requests:
          cpu: 10m
          memory: 1Gi
        limits:
          memory: 2Gi

    sidekiq:
      replicaCount: 1

      livenessProbe:
        exec:
          command:
            - "sh"
            - "-c"
            - "bundle exec sidekiqmon processes | grep ${HOSTNAME}"
      readinessProbe:
        exec:
          command:
            - "sh"
            - "-c"
            - "bundle exec sidekiqmon processes | grep ${HOSTNAME}"
      startupProbe:
        exec:
          command:
            - "sh"
            - "-c"
            - "bundle exec sidekiqmon processes | grep ${HOSTNAME}"
        initialDelaySeconds: 30
        periodSeconds: 10
        failureThreshold: 10

    persistence:
      gemCache:
        enabled: true
        existingClaim: ""
        annotations: []
        accessMode: "ReadWriteOnce"
        storageClass: "longhorn-database"
        size: 1Gi
      public:
        enabled: true
        existingClaim: ""
        annotations: []
        accessMode: "ReadWriteOnce"
        storageClass: ""
        size: 10Gi
      watched:
        enabled: true
        existingClaim: ""
        annotations: []
        accessMode: "ReadWriteOnce"
        storageClass: ""
        size: 10Gi

    postgresql:
      auth:
        # Either set the postgresql credentials in the helm chart, or provide your own secret.
        database: dawarich
        password: changeme
        username: dawarich
        # existingSecret: dawarich-postgresql
      primary:
        persistence:
          enabled: false
          # storageClass: ""
          # size: 8Gi
        # https://github.com/Freika/dawarich/pull/569
        extendedConfiguration: |-
          shared_buffers = 512MB
          work_mem = 128MB
          maintenance_work_mem = 128MB
          max_wal_size = 1GB
          min_wal_size = 80MB
          max_parallel_workers_per_gather = 4
      shmVolume:
        # As per upstream
        sizeLimit: 1Gi

    redis:
      auth:
        enabled: true
        password: changeme
        # Use an existing secret for redis auth. Do this if you're using Argo to manage your instance or otherwise using helm template under the hood
        #     The secret name can vary, but the password key must be redis-password.
        # existingSecret: dawarich-redis-secret
      master:
        persistence:
          enabled: false
      replica:
        replicaCount: 0

    # This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    imagePullSecrets: []
    # This is to override the chart name.
    nameOverride: ""
    fullnameOverride: ""

    # This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Automatically mount a ServiceAccount's API credentials?
      automount: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ""

    # This is for setting Kubernetes Annotations to a Pod.
    # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    podAnnotations: {}
    # This is for setting Kubernetes Labels to a Pod.
    # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    podLabels: {}

    podSecurityContext: {}
      # fsGroup: 2000

    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000

    # This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
    service:
      # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
      type: ClusterIP
      # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
      port: 3000

    # This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
    ingress:
      enabled: false
      className: ""
      annotations: {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
      hosts:
        - host: chart-example.local
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

    # Additional volumes on the output Deployment definition.
    extraVolumes: []

    # Additional volumeMounts on the output Deployment definition.
    extraVolumeMounts: []

    controllers:
      diff2rss:
        enabled: true
        type: deployment
        strategy: RollingUpdate
        rollingUpdate:
          unavailable: 0
        annotations:
          reloader.stakater.com/auto: "true"

        pod:
          securityContext:
            runAsNonRoot: true
            runAsUser: &context 1000
            runAsGroup: *context
            fsGroup: *context
            fsGroupChangePolicy: OnRootMismatch

        containers:
          app:
            image:
              repository: ghcr.io/chkpwd/diff2rss
              tag: v1.2.0
              pullPolicy: IfNotPresent

            probes: &probes
              liveness:
                enabled: true
              readiness:
                enabled: true
              startup:
                enabled: true

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              capabilities: {drop: ['ALL']}

            resources:
              requests:
                cpu: 10m
                memory: 100Mi
              limits:
                memory: 200Mi

    service:
      app:
        controller: diff2rss
        primary: true
        ports:
          http:
            port: 8000

    ingress:
      external:
        enabled: true
        className: ext-ingress
        annotations:
          external-dns.alpha.kubernetes.io/target: "${EXTERNAL_DOMAIN}"
        hosts:
          - host: "{{ .Release.Name }}.${EXTERNAL_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http
